import java.io.DataOutputStream;
import java.io.IOException;
import java.io.DataInputStream;
import java.net.Socket;
import java.util.List;
import java.util.Scanner;

/**
 * A client that connects to the game. Its main purpose is to sync
 * the local game state with the version on the server.
 * 
 * @author  Anne Xia
 * @version 05/13/2022
 * 
 * @author Sources - Meenakshi, Vaishnavi
 */
public class Client extends PlayerComputer {
    private Socket s;
    private GameThread gThread;
    
    private DataInputStream iStream;
    private DataOutputStream oStream;

    private boolean isPlaying;
    private Player self;
    private Score scores;
    
    /**
     * Constructs a client and connects to a server.
     * @param address the IP address of the server.
     * @param playerName the name of this player.
     */
    // TODO throw
    public Client(String address, String playerName) {
        self = new Player(playerName);
        // TODO initialize scores
        connectToServer(address);
    }

    public Client(String address) {
        this(address, "Player 1");
    }

    /**
     * Connects to a given server.
     * @param address the IP address of the server
     */
    // TODO throw exceptiobs
    private void connectToServer(String address) {
        try {
            s = new Socket(address, PlayerComputer.PORT);

            try {
                oStream = new DataOutputStream(s.getOutputStream());
                oStream.writeUTF(self.getName()); // sends player name to server
                iStream = new DataInputStream(s.getInputStream());
            } catch (Exception e) {
                System.out.println("Error in Client:");
                e.printStackTrace();
                return;
            }

            isPlaying = false;
            gThread = new GameThread(this, false, s);
            gThread.start();
        } catch (Exception ex) {
            System.out.println("Error connecting to server:");
            ex.printStackTrace();
        }
    }

    /**
     * Starts the game.
     */
    public void startGame() {
        isPlaying = true;
    }

    /**
     * Stops the game by stopping the current user's thread.
     */
    public void stopGame() {
        isPlaying = false;
        gThread.stopThread();
    }
    
    /**
     * Sends a slap card update to the server.
     */
    public void slapCard() {
        if (isPlaying) {
            System.out.println("#### card slap");
            gThread.slapCard(self);
        }
    }

    /**
     * Updates the score of a given player.
     * @param player a player.
     * @param newScore the new score.
     */
    public void updatePoints(Player player, int newScore) {
        if (isPlaying) {
            player.setPoints(newScore);
            // TODO refresh scoreboard
        }
    }

    /**
     * Simulates a new card being dealt by this player.
     * Card will be randomly generated by server and sent back to the client
     * to draw on the game window.
     */
    public void dealCard() {
        if (isPlaying) {
            gThread.dealCard(self, null);
            // actual card will be generated on server, null is a filler "default" value
            // TODO remove one card from current player's stack 
        }
    }

    /**
     * Displays the random card generated. This method should be called
     * only by GameThread, use the no-args version for actually dealing
     * a card.
     */
    // TODO (dont remove this) make GUI stuff threadsafe
    public void drawCard(Player player, Card card) throws IOException {
        if (isPlaying) { 
            gameWindow.draw(card); // How do we fix this?
            // TODO notify local class to update center deck
            // TODO notify GUI window to draw the card (if not done already)
            //call game classes draw card method, whith card as parameter
        }
    }

    /**
     * Sets the local players list to the given list.
     * @param players a list of players.
     */
    public void setPlayers(List<Player> players) {
        this.players = players;
    }

    /**
     * For debugging purposes only. Simulates a short sequence of actions.
     * @param args
     */
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        Client aTest = new Client("localhost", "CoolClient");

        System.out.println("#### Created client, enter to see players");
        scan.nextLine();

        System.out.println("#### Players: ");
        for (Player p : aTest.getPlayers()) {
            System.out.println(p.getName() + " - " + p.getPoints());
        }

        System.out.println("#### Enter to see CoolClient's point value");
        scan.nextLine();
        System.out.println(aTest.getMatch("CoolClient").getPoints());

        System.out.println("#### Enter to see sErVeR's point value");
        scan.nextLine();
        System.out.println(aTest.getMatch("sErVeR").getPoints());

        System.out.println("#### Enter to slap a card");
        scan.nextLine();
        aTest.slapCard();

        scan.close();
    }
}
